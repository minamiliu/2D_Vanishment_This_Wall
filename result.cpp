//******************************************************************************
//
// タイトル:		リザルトの流れ管理処理
// プログラム名:	result.cpp
// 作成者:			HAL東京ゲーム学科　劉南宏
//
//******************************************************************************


/*******************************************************************************
* インクルードファイル
*******************************************************************************/

#include "result.h"
#include "result_BG.h"
#include "input.h"
#include "fade.h"
#include "message.h"

#include "result_kdw.h"
#include "result_kdw_tex.h"

#include "result_rank.h"
#include "result_rank_tex.h"
#include "result_rank_nth.h"


//*****************************************************************************
// マクロ定義
//*****************************************************************************

/*******************************************************************************
* 構造体定義
*******************************************************************************/

/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/

/*******************************************************************************
* グローバル変数
*******************************************************************************/


/*******************************************************************************
関数名:	void InitResult(void)
引数:	なし
戻り値:	なし
説明:	リザルトの初期化処理
*******************************************************************************/
void InitResult(void)
{
	InitResultBG();

	GAME_MODE mode = GetGameMode();
	switch(mode)
	{
		case GAME_COOPERATE:
			InitResultRank();
			break;
		case GAME_BATTLE:
			InitResultKDW();
			break;
	}
	
}

/*******************************************************************************
関数名:	void UpdateResult(void)
引数:	なし
戻り値:	なし
説明:	リザルトの更新関数
*******************************************************************************/
void UpdateResult(void)
{
	UpdateResultBG();

	GAME_MODE mode = GetGameMode();
	switch(mode)
	{
		case GAME_COOPERATE:
			SetMessage(MSG_RANKING);
			UpdateResultRank();
			break;
		case GAME_BATTLE:
			SetMessage(MSG_RESULT);
			UpdateResultKDW();
			break;
	}

	if(GetKeyboardTrigger(DIK_RETURN) || GetGamePadTrigger( 0, BUTTON_B))
	{
		FadeOutToNext(MODE_TITLE);
	}


}

/*******************************************************************************
関数名:	void DrawResult(void)
引数:	なし
戻り値:	なし
説明:	リザルトの描画関数
*******************************************************************************/
void DrawResult(void)
{
	DrawResultBG();
	
	GAME_MODE mode = GetGameMode();
	switch(mode)
	{
		case GAME_COOPERATE:
			DrawResultRank();
			break;
		case GAME_BATTLE:
			DrawResultKDW();
			break;
	}
}
/*******************************************************************************
関数名:	void UninitResult(void)
引数:	なし
戻り値:	なし
説明:	リザルトの開放関数
*******************************************************************************/
void UninitResult(void)
{
	ClearMessage();
	UninitResultBG();
	UninitResultRank();
	UninitResultKDW();
}
